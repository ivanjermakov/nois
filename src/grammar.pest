file = { SOI ~ statements? ~ EOI }

statements = { (statement | _COMMENT | NEWLINE)* }

statement = { declaration | expression }

declaration = { identifier ~ EQUALS ~ expression }

expression = {
    string_literal
    | number_literal
    | struct_init
    | enum_init
    | list_init
    | function_init
    | function_call
}

struct_init = {"todo"}

enum_init = {"todo"}

list_init = {"todo"}

function_init = { multiline_function_init | arrow_function_init }

multiline_function_init = { argument_list ~ BLOCK_OPEN ~ statements? ~ BLOCK_CLOSE }

argument_list = {
    identifier
    | (BRACE_OPEN ~ identifier? ~ (COMMA ~ identifier)* ~ COMMA? ~ BRACE_CLOSE)
}

arrow_function_init = {"todo"}

function_call = { prefix_function_call | suffix_function_call }

prefix_function_call = { identifier ~ BRACE_OPEN ~ parameter_list ~ BRACE_CLOSE }

suffix_function_call = {"todo"}

parameter_list = { expression? ~ (COMMA ~ expression)* ~ COMMA? }

identifier = @{ ASCII_ALPHANUMERIC+ }

number_literal = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string_literal = @{string_literal_single | string_literal_double}

string_literal_single = { "'" ~ inner_string ~ "'" }

string_literal_double = { "\"" ~ inner_string ~ "\"" }

inner_string = @{ char* }

char = {
    !("\"" | "\\" | "'" | "'") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

EQUALS = _{ "=" }

BLOCK_OPEN = _{ "{" }

BLOCK_CLOSE = _{ "}" }

BRACE_OPEN = _{ "(" }

BRACE_CLOSE = _{ ")" }

COMMA = _ { "," }

_COMMENT   = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

WHITESPACE = _{ " " | "\t" }
