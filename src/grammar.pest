file = _{ SOI ~ block ~ NEWLINE* ~ EOI }

statement = _{ return_statement | declaration | expression }

block = { NEWLINE* ~ (statement ~ NEWLINE+)* ~ statement? ~ NEWLINE* }

declaration = { identifier ~ EQUALS ~ expression }

expression = _{ (
    struct_init
    | enum_init
    | list_init
    | function_init
    | function_call
	| string_literal
    | number_literal
    | identifier) ~ method_call* }

method_call = { DOT ~ function_call }

return_statement = { RETURN_KEYWORD ~ expression? }

struct_init = {"todo"}

enum_init = {"todo"}

list_init = { BRACKET_OPEN ~ expression? ~ (COMMA ~ expression)* ~ BRACKET_CLOSE }

function_init = { multiline_function_init | arrow_function_init }

multiline_function_init = _{ argument_list ~ BLOCK_OPEN ~ block ~ BLOCK_CLOSE }

argument_list = {
    identifier
    | (BRACE_OPEN ~ identifier? ~ (COMMA ~ identifier)* ~ COMMA? ~ BRACE_CLOSE)
}

arrow_function_init = _{"todo"}

function_call = { identifier ~ BRACE_OPEN ~ parameter_list ~ BRACE_CLOSE }

parameter_list = { expression? ~ (COMMA ~ expression)* ~ COMMA? }

identifier = @{ ASCII_ALPHANUMERIC+ }

number_literal = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT+)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string_literal = @{string_literal_single | string_literal_double}

string_literal_single = { "'" ~ inner_string ~ "'" }

string_literal_double = { "\"" ~ inner_string ~ "\"" }

inner_string = @{ char* }

char = {
    !("\"" | "\\" | "'" | "'") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

RETURN_KEYWORD = _{ "return" }

EQUALS = _{ "=" }

BLOCK_OPEN = _{ "{" }

BLOCK_CLOSE = _{ "}" }

BRACE_OPEN = _{ "(" }

BRACE_CLOSE = _{ ")" }

BRACKET_OPEN = _{ "[" }

BRACKET_CLOSE = _{ "]" }

COMMA = _{ "," }

DOT = _{ "." }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

WHITESPACE = _{ " " | "\t" }
